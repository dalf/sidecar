{% extends "base" %}

{% block header %}
    <style>
:root {
  --transition-1: all 0.3s ease-in-out;
  --transition-2: all 0.2s ease-in-out;
}

html {
  font-size: 1rem;
  font-family: "PT Sans", sans-serif;
}

body {
  margin: 1rem;
  padding: 0;
}

.header {
  text-align: center;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -webkit-touch-callout: none;
}

.autoComplete_wrapper > input {
    color: black !important;
    border-color: black !important;
}

.no_result {
  margin: 0.3rem;
  padding: 0.3rem 0.5rem;
  list-style: none;
  text-align: left;
  font-size: 1rem;
  color: #212121;
  transition: all 0.1s ease-in-out;
  border-radius: 0.35rem;
  background-color: rgba(255, 255, 255, 1);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: all 0.2s ease;
  outline: none;
}

h1 {
  color: #1D4E89;
  transition: var(--transition-1);
}

h1 > a {
  text-decoration: none;
  color: #1D4E89;
}

h1 > a::selection {
  color: #1D4E89;
}

h4 {
  margin-bottom: 5px;
  color: #00B2CA;
}

h4::selection {
  color: #00B2CA;
}

.mode {
  margin-top: 20px;
}

.autoComplete_wrapper {
  width: 48vw; 
}

.autoComplete_wrapper input {
    width: 100%;
}

.toggle {
  display: flex;
  /* position: absolute; */
  border: 1px solid #7DCFB6;
  height: 35px;
  width: 120px;
  border-radius: 50px;
  justify-content: flex-start;
  align-content: center;
  transition: var(--transition-2);
}

.toggler {
  display: grid;
  cursor: pointer;
  background-color: #7DCFB6;
  color: #fff;
  height: 25px;
  width: 60px;
  border-radius: 50px;
  margin: 5px;
  text-align: center;
  align-content: center;
  align-self: flex-start;
  transition: var(--transition-2);
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -webkit-touch-callout: none;
}

.toggler:hover {
  width: 65px;
  background-color: rgba(255, 122, 122, 0.7);
}

.toggler::selection {
  color: #fff;
}

.strict {
  display: inline;
}

.loose {
  display: inline;
}

@media only screen and (max-width: 600px) {
  .selection {
    margin-top: 15vh;
  }

  .footer {
    bottom: 1.5rem;
    transition: var(--transition-1);
  }
}

@media only screen and (max-height: 500px) {
  .footer {
    display: none;
  }
}

.intro {
    margin-right: 51vw;
}

.infobox {
    position: absolute;
    top: 1rem;
    right: 1rem;
    left: 50vw;
}

.autoComplete_list_1 {
    border: 1px solid black !important;
}

    </style>
    <style>
.autoComplete_wrapper {
  display: inline-block;
  position: relative;
}

.autoComplete_wrapper > input {
  height: 3rem;
  width: 100%;
  margin: 0;
  padding: 0 3.2rem 0 2rem;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  font-size: 1rem;
  text-overflow: ellipsis;
  color: rgba(255, 122, 122, 0.3);
  outline: none;
  border-radius: 10rem;
  border: 0.05rem solid #F79256;
  background-size: 1.4rem;
  background-position: left 1.05rem top 0.8rem;
  background-repeat: no-repeat;
  background-origin: border-box;
  background-color: #fff;
  transition: all 0.4s ease;
  -webkit-transition: all -webkit-transform 0.4s ease;
}

.autoComplete_wrapper > input::placeholder {
  color: rgba(247, 146, 86, 0.5);
  transition: all 0.3s ease;
  -webkit-transition: all -webkit-transform 0.3s ease;
}

.autoComplete_wrapper > input:hover::placeholder {
  color: rgba(247, 146, 86, 0.6);
  transition: all 0.3s ease;
  -webkit-transition: all -webkit-transform 0.3s ease;
}

.autoComplete_wrapper > input:focus::placeholder {
  padding: 0.1rem 0.6rem;
  font-size: 0.95rem;
  color: rgba(247, 146, 86, 0.4);
}

.autoComplete_wrapper > input:focus::selection {
  background-color: rgba(247, 146, 86, 0.15);
}

.autoComplete_wrapper > input::selection {
  background-color: rgba(247, 146, 86, 0.15);
}

.autoComplete_wrapper > input:hover {
  color: #F79256;
  transition: all 0.3s ease;
  -webkit-transition: all -webkit-transform 0.3s ease;
}

.autoComplete_wrapper > input:focus {
  color: #F79256;
  border: 0.06rem solid rgba(247, 146, 86, 0.8);
}

.autoComplete_wrapper > ul {
  position: absolute;
  max-height: 226px;
  overflow-y: scroll;
  box-sizing: border-box;
  left: 0;
  right: 0;
  margin: 0.5rem 0 0 0;
  padding: 0;
  z-index: 1;
  list-style: none;
  border-radius: 0.6rem;
  background-color: #fff;
  border: 1px solid rgba(33, 33, 33, 0.9);
  box-shadow: 0 3px 6px rgba(149, 157, 165, 0.15);
  outline: none;
  transition: opacity 0.15s ease-in-out;
  -moz-transition: opacity 0.15s ease-in-out;
  -webkit-transition: opacity 0.15s ease-in-out;
}

.autoComplete_wrapper > ul[hidden],
.autoComplete_wrapper > ul:empty {
  display: block;
  opacity: 0;
  transform: scale(0);
}

.autoComplete_wrapper > ul > li {
  margin: 0.3rem;
  padding: 0.3rem 0.5rem;
  text-align: left;
  font-size: 1rem;
  color: #212121;
  border-radius: 0.35rem;
  background-color: rgba(255, 255, 255, 1);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: all 0.2s ease;
}

.autoComplete_wrapper > ul > li mark {
  background-color: transparent;
  color: rgba(255, 122, 122, 1);
  font-weight: bold;
}

.autoComplete_wrapper > ul > li:hover {
  cursor: pointer;
  background-color: rgba(255, 122, 122, 0.15);
}

.autoComplete_wrapper > ul > li[aria-selected="true"] {
  background-color: rgba(255, 122, 122, 0.15);
}

@media only screen and (max-width: 600px) {
  .autoComplete_wrapper > input {
    width: 18rem;
  }
    </style>
{% endblock header %}

{% block content %}
    <div class="intro">
        <h1>Almost Local Wikidata</h1>
        <p>This is a subset of Wikidata stored in a 16GB database.</p>
        <p>It provides instant suggestions and infoboxes at the cost of two REST API calls to Wikidata and Wikidata. 
           It can returns the labels and sitelinks for <a href="/api/entity/42">any</a> entity.</p>
        <p>The current implementation displays only few fields in the infoboxes, all other fields can be display without cost.</p>
        <p>The most important thing is missing: a good ranking algorithm.</p>

        <h4>Live test</h4>
        <p>Results are displayed only in English to simplify the UI implementation.</p>
        <p>The suggestion dropdown list shows the Wikidata IDs and scores on the right side.</p>
        <p>Start your query with <code>"!pop "</code> (without double quotes) to rank the results by popularity.</p>
        <div class="autoComplete_wrapper" role="combobox" aria-owns="autoComplete_list_1" aria-haspopup="true" aria-expanded="false">
            <input id="autoComplete" type="text" dir="ltr" spellcheck="false" autocorrect="off" autocomplete="off" autocapitalize="none" maxlength="2048" tabindex="1"
                aria-controls="autoComplete_list_1" aria-autocomplete="both" placeholder="Search...">
        </div>

        <h4>Technically</h4>
        <p>Two <a href="https://github.com/quickwit-oss/tantivy">Tantivy</a> indexes stores the data.
           The first index allows finding the Wikidata IDs from a query (compressed with LZ4). A second index stores the labels and sitelinks of the entities (compressed with Brotli).</p>
        <p><a href="https://github.com/meilisearch/charabia/">Charabia</a> tokenizes the labels because it can detect the language.</p>
        <p>See the documented API using either <a href="/rapidoc/">rapidoc</a> or <a href="/swagger-ui/">swagger</a>.</p>


        <h4>Requirements</h4>
        <p>The database is built from a Wikidata dump (<a href="https://dumps.wikimedia.org/wikidatawiki/entities/">bz2 of 72GB</a>).
            It took about 2h30 to build the index on my laptop (there is a lot of room for improvement). Once built, the server needs about 1Go of RAM.</p>
    </div>

    <div class="infobox">
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js"></script>

    <script>
        const autoCompleteJS = new autoComplete({
        data: {
            src: async (query) => { 
                let pop = false;
                if (query.substring(0, 5) === "!pop ") {
                    query = query.substring(5);
                    pop = true;
                }
                const source = await fetch("/api/search/?q=" + query + "&pop=" + pop);
                const data = await source.json();
                return data["entities"]
            },
            keys: ["title"],
            cache: false,
        },
        searchEngine: (query, record) => {
            return record;
        },
        trigger: (query) => {
            return query.replace(/ /g, "").length; // Returns "Boolean"
        },
        debounce: 100,
        placeHolder: "Search...",
        submit: true,
        resultsList: {
            noResults: true,
            maxResults: 100,
            tabSelect: true,
        },
        resultItem: {
            element: (item, data) => {
                // Modify Results Item Style
                item.style = "display: flex; justify-content: space-between;";
                // Modify Results Item Content
                item.innerHTML = `
                <span style="text-overflow: ellipsis; white-space: nowrap; overflow: hidden;">
                    ${data.match}
                </span>
                <span style="display: flex; align-items: left; font-size: 13px; font-weight: 100; text-transform: uppercase; color: rgba(0,0,0,.5);">
                    ${data.value.instance_of} <i style="display: inline-block; width: 3rem; text-align: right">${Math.round(data.value.score * 100) / 100}</i>
                </span>`;
            },
            highlight: true,
        },
        events: {
            input: {
                focus() {
                    if (autoCompleteJS.input.value.length) autoCompleteJS.start();
                },
                selection(event) {
                    const feedback = event.detail;
                    autoCompleteJS.input.blur();
                    // Prepare User's Selected Value
                    const selection = feedback.selection.value[feedback.selection.key];

                    fetch("/infobox/" + feedback.selection.value.qid).then(response => {
                        response.text().then(content => {
                            document.querySelector('.infobox').innerHTML = content;
                        });
                    });

                    // Render selected choice to selection div
                    document.querySelector(".infobox").innerHTML = "<i>Loading " + feedback.selection.value.qid + " ...</i>";
                    // Replace Input value with the selected value
                    autoCompleteJS.input.value = selection;
                    // Console log autoComplete data feedback
                    console.log(feedback);

                    document.querySelector("#autoComplete").focus();
                },
            },
        },
        });

        document.querySelector("#autoComplete").addEventListener("navigate", function (event) {
            console.log(event.detail.selection.value.qid);
        });
    </script>
{% endblock content %}
